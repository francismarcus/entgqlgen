// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/facebook/ent/dialect/sql"
	"github.com/francismarcus/eg/ent/exercise"
	"github.com/francismarcus/eg/ent/program"
	"github.com/francismarcus/eg/ent/shout"
	"github.com/francismarcus/eg/ent/user"
	"github.com/francismarcus/eg/ent/usersettings"
	"github.com/francismarcus/eg/ent/workout"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", v)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// ExerciseEdge is the edge representation of Exercise.
type ExerciseEdge struct {
	Node   *Exercise `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ExerciseConnection is the connection containing edges to Exercise.
type ExerciseConnection struct {
	Edges      []*ExerciseEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// ExercisePaginateOption enables pagination customization.
type ExercisePaginateOption func(*exercisePager) error

// WithExerciseOrder configures pagination ordering.
func WithExerciseOrder(order *ExerciseOrder) ExercisePaginateOption {
	if order == nil {
		order = DefaultExerciseOrder
	}
	o := *order
	return func(pager *exercisePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultExerciseOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithExerciseFilter configures pagination filter.
func WithExerciseFilter(filter func(*ExerciseQuery) (*ExerciseQuery, error)) ExercisePaginateOption {
	return func(pager *exercisePager) error {
		if filter == nil {
			return errors.New("ExerciseQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type exercisePager struct {
	order  *ExerciseOrder
	filter func(*ExerciseQuery) (*ExerciseQuery, error)
}

func newExercisePager(opts []ExercisePaginateOption) (*exercisePager, error) {
	pager := &exercisePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultExerciseOrder
	}
	return pager, nil
}

func (p *exercisePager) applyFilter(query *ExerciseQuery) (*ExerciseQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *exercisePager) toCursor(e *Exercise) Cursor {
	return p.order.Field.toCursor(e)
}

func (p *exercisePager) applyCursors(query *ExerciseQuery, after, before *Cursor) *ExerciseQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultExerciseOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *exercisePager) applyOrder(query *ExerciseQuery, reverse bool) *ExerciseQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultExerciseOrder.Field {
		query = query.Order(Asc(DefaultExerciseOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Exercise.
func (e *ExerciseQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ExercisePaginateOption,
) (*ExerciseConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newExercisePager(opts)
	if err != nil {
		return nil, err
	}

	if e, err = pager.applyFilter(e); err != nil {
		return nil, err
	}

	conn := &ExerciseConnection{Edges: []*ExerciseEdge{}}
	if !hasCollectedField(ctx, edgesField) ||
		first != nil && *first == 0 ||
		last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := e.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) &&
		hasCollectedField(ctx, totalCountField) {
		count, err := e.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	e = pager.applyCursors(e, after, before)
	e = pager.applyOrder(e, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		e = e.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		e = e.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := e.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Exercise
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Exercise {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Exercise {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ExerciseEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ExerciseEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ExerciseOrderField defines the ordering field of Exercise.
type ExerciseOrderField struct {
	field    string
	toCursor func(*Exercise) Cursor
}

// ExerciseOrder defines the ordering of Exercise.
type ExerciseOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ExerciseOrderField `json:"field"`
}

// DefaultExerciseOrder is the default ordering of Exercise.
var DefaultExerciseOrder = &ExerciseOrder{
	Direction: OrderDirectionAsc,
	Field: &ExerciseOrderField{
		field: exercise.FieldID,
		toCursor: func(e *Exercise) Cursor {
			return Cursor{ID: e.ID}
		},
	},
}

// ProgramEdge is the edge representation of Program.
type ProgramEdge struct {
	Node   *Program `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ProgramConnection is the connection containing edges to Program.
type ProgramConnection struct {
	Edges      []*ProgramEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// ProgramPaginateOption enables pagination customization.
type ProgramPaginateOption func(*programPager) error

// WithProgramOrder configures pagination ordering.
func WithProgramOrder(order *ProgramOrder) ProgramPaginateOption {
	if order == nil {
		order = DefaultProgramOrder
	}
	o := *order
	return func(pager *programPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProgramOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProgramFilter configures pagination filter.
func WithProgramFilter(filter func(*ProgramQuery) (*ProgramQuery, error)) ProgramPaginateOption {
	return func(pager *programPager) error {
		if filter == nil {
			return errors.New("ProgramQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type programPager struct {
	order  *ProgramOrder
	filter func(*ProgramQuery) (*ProgramQuery, error)
}

func newProgramPager(opts []ProgramPaginateOption) (*programPager, error) {
	pager := &programPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProgramOrder
	}
	return pager, nil
}

func (p *programPager) applyFilter(query *ProgramQuery) (*ProgramQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *programPager) toCursor(pr *Program) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *programPager) applyCursors(query *ProgramQuery, after, before *Cursor) *ProgramQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProgramOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *programPager) applyOrder(query *ProgramQuery, reverse bool) *ProgramQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProgramOrder.Field {
		query = query.Order(Asc(DefaultProgramOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Program.
func (pr *ProgramQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProgramPaginateOption,
) (*ProgramConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProgramPager(opts)
	if err != nil {
		return nil, err
	}

	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}

	conn := &ProgramConnection{Edges: []*ProgramEdge{}}
	if !hasCollectedField(ctx, edgesField) ||
		first != nil && *first == 0 ||
		last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := pr.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) &&
		hasCollectedField(ctx, totalCountField) {
		count, err := pr.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	pr = pager.applyCursors(pr, after, before)
	pr = pager.applyOrder(pr, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		pr = pr.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := pr.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Program
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Program {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Program {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProgramEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProgramEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// ProgramOrderFieldCreatedAt orders Program by created_at.
	ProgramOrderFieldCreatedAt = &ProgramOrderField{
		field: program.FieldCreatedAt,
		toCursor: func(pr *Program) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.CreatedAt,
			}
		},
	}
	// ProgramOrderFieldUpdatedAt orders Program by updated_at.
	ProgramOrderFieldUpdatedAt = &ProgramOrderField{
		field: program.FieldUpdatedAt,
		toCursor: func(pr *Program) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ProgramOrderField) String() string {
	var str string
	switch f.field {
	case program.FieldCreatedAt:
		str = "CREATED_AT"
	case program.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ProgramOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ProgramOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ProgramOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ProgramOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ProgramOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid ProgramOrderField", str)
	}
	return nil
}

// ProgramOrderField defines the ordering field of Program.
type ProgramOrderField struct {
	field    string
	toCursor func(*Program) Cursor
}

// ProgramOrder defines the ordering of Program.
type ProgramOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ProgramOrderField `json:"field"`
}

// DefaultProgramOrder is the default ordering of Program.
var DefaultProgramOrder = &ProgramOrder{
	Direction: OrderDirectionAsc,
	Field: &ProgramOrderField{
		field: program.FieldID,
		toCursor: func(pr *Program) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ShoutEdge is the edge representation of Shout.
type ShoutEdge struct {
	Node   *Shout `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ShoutConnection is the connection containing edges to Shout.
type ShoutConnection struct {
	Edges      []*ShoutEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// ShoutPaginateOption enables pagination customization.
type ShoutPaginateOption func(*shoutPager) error

// WithShoutOrder configures pagination ordering.
func WithShoutOrder(order *ShoutOrder) ShoutPaginateOption {
	if order == nil {
		order = DefaultShoutOrder
	}
	o := *order
	return func(pager *shoutPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultShoutOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithShoutFilter configures pagination filter.
func WithShoutFilter(filter func(*ShoutQuery) (*ShoutQuery, error)) ShoutPaginateOption {
	return func(pager *shoutPager) error {
		if filter == nil {
			return errors.New("ShoutQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type shoutPager struct {
	order  *ShoutOrder
	filter func(*ShoutQuery) (*ShoutQuery, error)
}

func newShoutPager(opts []ShoutPaginateOption) (*shoutPager, error) {
	pager := &shoutPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultShoutOrder
	}
	return pager, nil
}

func (p *shoutPager) applyFilter(query *ShoutQuery) (*ShoutQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *shoutPager) toCursor(s *Shout) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *shoutPager) applyCursors(query *ShoutQuery, after, before *Cursor) *ShoutQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultShoutOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *shoutPager) applyOrder(query *ShoutQuery, reverse bool) *ShoutQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultShoutOrder.Field {
		query = query.Order(Asc(DefaultShoutOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Shout.
func (s *ShoutQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ShoutPaginateOption,
) (*ShoutConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newShoutPager(opts)
	if err != nil {
		return nil, err
	}

	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}

	conn := &ShoutConnection{Edges: []*ShoutEdge{}}
	if !hasCollectedField(ctx, edgesField) ||
		first != nil && *first == 0 ||
		last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := s.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) &&
		hasCollectedField(ctx, totalCountField) {
		count, err := s.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	s = pager.applyCursors(s, after, before)
	s = pager.applyOrder(s, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		s = s.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := s.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Shout
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Shout {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Shout {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ShoutEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ShoutEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// ShoutOrderFieldCreatedAt orders Shout by created_at.
	ShoutOrderFieldCreatedAt = &ShoutOrderField{
		field: shout.FieldCreatedAt,
		toCursor: func(s *Shout) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.CreatedAt,
			}
		},
	}
	// ShoutOrderFieldUpdatedAt orders Shout by updated_at.
	ShoutOrderFieldUpdatedAt = &ShoutOrderField{
		field: shout.FieldUpdatedAt,
		toCursor: func(s *Shout) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.UpdatedAt,
			}
		},
	}
	// ShoutOrderFieldLikes orders Shout by likes.
	ShoutOrderFieldLikes = &ShoutOrderField{
		field: shout.FieldLikes,
		toCursor: func(s *Shout) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Likes,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ShoutOrderField) String() string {
	var str string
	switch f.field {
	case shout.FieldCreatedAt:
		str = "CREATED_AT"
	case shout.FieldUpdatedAt:
		str = "UPDATED_AT"
	case shout.FieldLikes:
		str = "LIKES"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ShoutOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ShoutOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ShoutOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ShoutOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ShoutOrderFieldUpdatedAt
	case "LIKES":
		*f = *ShoutOrderFieldLikes
	default:
		return fmt.Errorf("%s is not a valid ShoutOrderField", str)
	}
	return nil
}

// ShoutOrderField defines the ordering field of Shout.
type ShoutOrderField struct {
	field    string
	toCursor func(*Shout) Cursor
}

// ShoutOrder defines the ordering of Shout.
type ShoutOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *ShoutOrderField `json:"field"`
}

// DefaultShoutOrder is the default ordering of Shout.
var DefaultShoutOrder = &ShoutOrder{
	Direction: OrderDirectionAsc,
	Field: &ShoutOrderField{
		field: shout.FieldID,
		toCursor: func(s *Shout) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(Asc(DefaultUserOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}

	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}

	conn := &UserConnection{Edges: []*UserEdge{}}
	if !hasCollectedField(ctx, edgesField) ||
		first != nil && *first == 0 ||
		last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := u.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) &&
		hasCollectedField(ctx, totalCountField) {
		count, err := u.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		u = u.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := u.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		field: user.FieldCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
	// UserOrderFieldUpdatedAt orders User by updated_at.
	UserOrderFieldUpdatedAt = &UserOrderField{
		field: user.FieldUpdatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.field {
	case user.FieldCreatedAt:
		str = "CREATED_AT"
	case user.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *UserOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// UserSettingsEdge is the edge representation of UserSettings.
type UserSettingsEdge struct {
	Node   *UserSettings `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// UserSettingsConnection is the connection containing edges to UserSettings.
type UserSettingsConnection struct {
	Edges      []*UserSettingsEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

// UserSettingsPaginateOption enables pagination customization.
type UserSettingsPaginateOption func(*userSettingsPager) error

// WithUserSettingsOrder configures pagination ordering.
func WithUserSettingsOrder(order *UserSettingsOrder) UserSettingsPaginateOption {
	if order == nil {
		order = DefaultUserSettingsOrder
	}
	o := *order
	return func(pager *userSettingsPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserSettingsOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserSettingsFilter configures pagination filter.
func WithUserSettingsFilter(filter func(*UserSettingsQuery) (*UserSettingsQuery, error)) UserSettingsPaginateOption {
	return func(pager *userSettingsPager) error {
		if filter == nil {
			return errors.New("UserSettingsQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userSettingsPager struct {
	order  *UserSettingsOrder
	filter func(*UserSettingsQuery) (*UserSettingsQuery, error)
}

func newUserSettingsPager(opts []UserSettingsPaginateOption) (*userSettingsPager, error) {
	pager := &userSettingsPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserSettingsOrder
	}
	return pager, nil
}

func (p *userSettingsPager) applyFilter(query *UserSettingsQuery) (*UserSettingsQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userSettingsPager) toCursor(us *UserSettings) Cursor {
	return p.order.Field.toCursor(us)
}

func (p *userSettingsPager) applyCursors(query *UserSettingsQuery, after, before *Cursor) *UserSettingsQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserSettingsOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userSettingsPager) applyOrder(query *UserSettingsQuery, reverse bool) *UserSettingsQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserSettingsOrder.Field {
		query = query.Order(Asc(DefaultUserSettingsOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to UserSettings.
func (us *UserSettingsQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserSettingsPaginateOption,
) (*UserSettingsConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserSettingsPager(opts)
	if err != nil {
		return nil, err
	}

	if us, err = pager.applyFilter(us); err != nil {
		return nil, err
	}

	conn := &UserSettingsConnection{Edges: []*UserSettingsEdge{}}
	if !hasCollectedField(ctx, edgesField) ||
		first != nil && *first == 0 ||
		last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := us.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) &&
		hasCollectedField(ctx, totalCountField) {
		count, err := us.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	us = pager.applyCursors(us, after, before)
	us = pager.applyOrder(us, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		us = us.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		us = us.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := us.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *UserSettings
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserSettings {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserSettings {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserSettingsEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserSettingsEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// UserSettingsOrderFieldGender orders UserSettings by gender.
	UserSettingsOrderFieldGender = &UserSettingsOrderField{
		field: usersettings.FieldGender,
		toCursor: func(us *UserSettings) Cursor {
			return Cursor{
				ID:    us.ID,
				Value: us.Gender,
			}
		},
	}
	// UserSettingsOrderFieldLevel orders UserSettings by level.
	UserSettingsOrderFieldLevel = &UserSettingsOrderField{
		field: usersettings.FieldLevel,
		toCursor: func(us *UserSettings) Cursor {
			return Cursor{
				ID:    us.ID,
				Value: us.Level,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserSettingsOrderField) String() string {
	var str string
	switch f.field {
	case usersettings.FieldGender:
		str = "GENDER"
	case usersettings.FieldLevel:
		str = "LEVEL"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserSettingsOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserSettingsOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserSettingsOrderField %T must be a string", v)
	}
	switch str {
	case "GENDER":
		*f = *UserSettingsOrderFieldGender
	case "LEVEL":
		*f = *UserSettingsOrderFieldLevel
	default:
		return fmt.Errorf("%s is not a valid UserSettingsOrderField", str)
	}
	return nil
}

// UserSettingsOrderField defines the ordering field of UserSettings.
type UserSettingsOrderField struct {
	field    string
	toCursor func(*UserSettings) Cursor
}

// UserSettingsOrder defines the ordering of UserSettings.
type UserSettingsOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *UserSettingsOrderField `json:"field"`
}

// DefaultUserSettingsOrder is the default ordering of UserSettings.
var DefaultUserSettingsOrder = &UserSettingsOrder{
	Direction: OrderDirectionAsc,
	Field: &UserSettingsOrderField{
		field: usersettings.FieldID,
		toCursor: func(us *UserSettings) Cursor {
			return Cursor{ID: us.ID}
		},
	},
}

// WorkoutEdge is the edge representation of Workout.
type WorkoutEdge struct {
	Node   *Workout `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// WorkoutConnection is the connection containing edges to Workout.
type WorkoutConnection struct {
	Edges      []*WorkoutEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// WorkoutPaginateOption enables pagination customization.
type WorkoutPaginateOption func(*workoutPager) error

// WithWorkoutOrder configures pagination ordering.
func WithWorkoutOrder(order *WorkoutOrder) WorkoutPaginateOption {
	if order == nil {
		order = DefaultWorkoutOrder
	}
	o := *order
	return func(pager *workoutPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWorkoutOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWorkoutFilter configures pagination filter.
func WithWorkoutFilter(filter func(*WorkoutQuery) (*WorkoutQuery, error)) WorkoutPaginateOption {
	return func(pager *workoutPager) error {
		if filter == nil {
			return errors.New("WorkoutQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type workoutPager struct {
	order  *WorkoutOrder
	filter func(*WorkoutQuery) (*WorkoutQuery, error)
}

func newWorkoutPager(opts []WorkoutPaginateOption) (*workoutPager, error) {
	pager := &workoutPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWorkoutOrder
	}
	return pager, nil
}

func (p *workoutPager) applyFilter(query *WorkoutQuery) (*WorkoutQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *workoutPager) toCursor(w *Workout) Cursor {
	return p.order.Field.toCursor(w)
}

func (p *workoutPager) applyCursors(query *WorkoutQuery, after, before *Cursor) *WorkoutQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWorkoutOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *workoutPager) applyOrder(query *WorkoutQuery, reverse bool) *WorkoutQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWorkoutOrder.Field {
		query = query.Order(Asc(DefaultWorkoutOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Workout.
func (w *WorkoutQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WorkoutPaginateOption,
) (*WorkoutConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWorkoutPager(opts)
	if err != nil {
		return nil, err
	}

	if w, err = pager.applyFilter(w); err != nil {
		return nil, err
	}

	conn := &WorkoutConnection{Edges: []*WorkoutEdge{}}
	if !hasCollectedField(ctx, edgesField) ||
		first != nil && *first == 0 ||
		last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := w.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) &&
		hasCollectedField(ctx, totalCountField) {
		count, err := w.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	w = pager.applyCursors(w, after, before)
	w = pager.applyOrder(w, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		w = w.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		w = w.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := w.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Workout
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Workout {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Workout {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WorkoutEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WorkoutEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// WorkoutOrderFieldCreatedAt orders Workout by created_at.
	WorkoutOrderFieldCreatedAt = &WorkoutOrderField{
		field: workout.FieldCreatedAt,
		toCursor: func(w *Workout) Cursor {
			return Cursor{
				ID:    w.ID,
				Value: w.CreatedAt,
			}
		},
	}
	// WorkoutOrderFieldUpdatedAt orders Workout by updated_at.
	WorkoutOrderFieldUpdatedAt = &WorkoutOrderField{
		field: workout.FieldUpdatedAt,
		toCursor: func(w *Workout) Cursor {
			return Cursor{
				ID:    w.ID,
				Value: w.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f WorkoutOrderField) String() string {
	var str string
	switch f.field {
	case workout.FieldCreatedAt:
		str = "CREATED_AT"
	case workout.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f WorkoutOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *WorkoutOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("WorkoutOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *WorkoutOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *WorkoutOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid WorkoutOrderField", str)
	}
	return nil
}

// WorkoutOrderField defines the ordering field of Workout.
type WorkoutOrderField struct {
	field    string
	toCursor func(*Workout) Cursor
}

// WorkoutOrder defines the ordering of Workout.
type WorkoutOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *WorkoutOrderField `json:"field"`
}

// DefaultWorkoutOrder is the default ordering of Workout.
var DefaultWorkoutOrder = &WorkoutOrder{
	Direction: OrderDirectionAsc,
	Field: &WorkoutOrderField{
		field: workout.FieldID,
		toCursor: func(w *Workout) Cursor {
			return Cursor{ID: w.ID}
		},
	},
}
