// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/francismarcus/eg/ent/diet"
	"github.com/francismarcus/eg/ent/schema"
	"github.com/francismarcus/eg/ent/user"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	dietFields := schema.Diet{}.Fields()
	_ = dietFields
	// dietDescCreatedAt is the schema descriptor for created_at field.
	dietDescCreatedAt := dietFields[0].Descriptor()
	// diet.DefaultCreatedAt holds the default value on creation for the created_at field.
	diet.DefaultCreatedAt = dietDescCreatedAt.Default.(func() time.Time)
	// dietDescUpdatedAt is the schema descriptor for updated_at field.
	dietDescUpdatedAt := dietFields[1].Descriptor()
	// diet.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	diet.DefaultUpdatedAt = dietDescUpdatedAt.Default.(func() time.Time)
	// diet.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	diet.UpdateDefaultUpdatedAt = dietDescUpdatedAt.UpdateDefault.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}
