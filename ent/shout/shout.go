// Code generated by entc, DO NOT EDIT.

package shout

import (
	"time"
)

const (
	// Label holds the string label denoting the shout type in the database.
	Label = "shout"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldLikes holds the string denoting the likes field in the database.
	FieldLikes = "likes"

	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeLikedBy holds the string denoting the liked_by edge name in mutations.
	EdgeLikedBy = "liked_by"

	// Table holds the table name of the shout in the database.
	Table = "shouts"
	// AuthorTable is the table the holds the author relation/edge.
	AuthorTable = "shouts"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "user_shouts"
	// LikedByTable is the table the holds the liked_by relation/edge. The primary key declared below.
	LikedByTable = "shout_liked_by"
	// LikedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	LikedByInverseTable = "users"
)

// Columns holds all SQL columns for shout fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMessage,
	FieldLikes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Shout type.
var ForeignKeys = []string{
	"user_shouts",
}

var (
	// LikedByPrimaryKey and LikedByColumn2 are the table columns denoting the
	// primary key for the liked_by relation (M2M).
	LikedByPrimaryKey = []string{"shout_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultLikes holds the default value on creation for the likes field.
	DefaultLikes int
)
