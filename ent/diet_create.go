// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/francismarcus/eg/ent/diet"
	"github.com/francismarcus/eg/ent/user"
)

// DietCreate is the builder for creating a Diet entity.
type DietCreate struct {
	config
	mutation *DietMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (dc *DietCreate) SetCreatedAt(t time.Time) *DietCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (dc *DietCreate) SetNillableCreatedAt(t *time.Time) *DietCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the updated_at field.
func (dc *DietCreate) SetUpdatedAt(t time.Time) *DietCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (dc *DietCreate) SetNillableUpdatedAt(t *time.Time) *DietCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetName sets the name field.
func (dc *DietCreate) SetName(s string) *DietCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetGoalWeight sets the goal_weight field.
func (dc *DietCreate) SetGoalWeight(i int) *DietCreate {
	dc.mutation.SetGoalWeight(i)
	return dc
}

// SetLength sets the length field.
func (dc *DietCreate) SetLength(i int) *DietCreate {
	dc.mutation.SetLength(i)
	return dc
}

// SetAuthorID sets the author edge to User by id.
func (dc *DietCreate) SetAuthorID(id int) *DietCreate {
	dc.mutation.SetAuthorID(id)
	return dc
}

// SetAuthor sets the author edge to User.
func (dc *DietCreate) SetAuthor(u *User) *DietCreate {
	return dc.SetAuthorID(u.ID)
}

// Mutation returns the DietMutation object of the builder.
func (dc *DietCreate) Mutation() *DietMutation {
	return dc.mutation
}

// Save creates the Diet in the database.
func (dc *DietCreate) Save(ctx context.Context) (*Diet, error) {
	var (
		err  error
		node *Diet
	)
	dc.defaults()
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DietMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DietCreate) SaveX(ctx context.Context) *Diet {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (dc *DietCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := diet.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := diet.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DietCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := dc.mutation.GoalWeight(); !ok {
		return &ValidationError{Name: "goal_weight", err: errors.New("ent: missing required field \"goal_weight\"")}
	}
	if _, ok := dc.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New("ent: missing required field \"length\"")}
	}
	if _, ok := dc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New("ent: missing required edge \"author\"")}
	}
	return nil
}

func (dc *DietCreate) sqlSave(ctx context.Context) (*Diet, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dc *DietCreate) createSpec() (*Diet, *sqlgraph.CreateSpec) {
	var (
		_node = &Diet{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: diet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: diet.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: diet.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: diet.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diet.FieldName,
		})
		_node.Name = value
	}
	if value, ok := dc.mutation.GoalWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: diet.FieldGoalWeight,
		})
		_node.GoalWeight = value
	}
	if value, ok := dc.mutation.Length(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: diet.FieldLength,
		})
		_node.Length = value
	}
	if nodes := dc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diet.AuthorTable,
			Columns: []string{diet.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DietCreateBulk is the builder for creating a bulk of Diet entities.
type DietCreateBulk struct {
	config
	builders []*DietCreate
}

// Save creates the Diet entities in the database.
func (dcb *DietCreateBulk) Save(ctx context.Context) ([]*Diet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Diet, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DietMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (dcb *DietCreateBulk) SaveX(ctx context.Context) []*Diet {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
