// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/francismarcus/eg/ent/predicate"
	"github.com/francismarcus/eg/ent/program"
	"github.com/francismarcus/eg/ent/workout"
)

// WorkoutUpdate is the builder for updating Workout entities.
type WorkoutUpdate struct {
	config
	hooks      []Hook
	mutation   *WorkoutMutation
	predicates []predicate.Workout
}

// Where adds a new predicate for the builder.
func (wu *WorkoutUpdate) Where(ps ...predicate.Workout) *WorkoutUpdate {
	wu.predicates = append(wu.predicates, ps...)
	return wu
}

// SetUpdatedAt sets the updated_at field.
func (wu *WorkoutUpdate) SetUpdatedAt(t time.Time) *WorkoutUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetName sets the name field.
func (wu *WorkoutUpdate) SetName(s string) *WorkoutUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetProgramID sets the program edge to Program by id.
func (wu *WorkoutUpdate) SetProgramID(id int) *WorkoutUpdate {
	wu.mutation.SetProgramID(id)
	return wu
}

// SetNillableProgramID sets the program edge to Program by id if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableProgramID(id *int) *WorkoutUpdate {
	if id != nil {
		wu = wu.SetProgramID(*id)
	}
	return wu
}

// SetProgram sets the program edge to Program.
func (wu *WorkoutUpdate) SetProgram(p *Program) *WorkoutUpdate {
	return wu.SetProgramID(p.ID)
}

// Mutation returns the WorkoutMutation object of the builder.
func (wu *WorkoutUpdate) Mutation() *WorkoutMutation {
	return wu.mutation
}

// ClearProgram clears the "program" edge to type Program.
func (wu *WorkoutUpdate) ClearProgram() *WorkoutUpdate {
	wu.mutation.ClearProgram()
	return wu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (wu *WorkoutUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wu.defaults()
	if len(wu.hooks) == 0 {
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkoutUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkoutUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkoutUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WorkoutUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := workout.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

func (wu *WorkoutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workout.Table,
			Columns: workout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workout.FieldID,
			},
		},
	}
	if ps := wu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workout.FieldUpdatedAt,
		})
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workout.FieldName,
		})
	}
	if wu.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workout.ProgramTable,
			Columns: []string{workout.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: program.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workout.ProgramTable,
			Columns: []string{workout.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: program.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workout.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkoutUpdateOne is the builder for updating a single Workout entity.
type WorkoutUpdateOne struct {
	config
	hooks    []Hook
	mutation *WorkoutMutation
}

// SetUpdatedAt sets the updated_at field.
func (wuo *WorkoutUpdateOne) SetUpdatedAt(t time.Time) *WorkoutUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetName sets the name field.
func (wuo *WorkoutUpdateOne) SetName(s string) *WorkoutUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetProgramID sets the program edge to Program by id.
func (wuo *WorkoutUpdateOne) SetProgramID(id int) *WorkoutUpdateOne {
	wuo.mutation.SetProgramID(id)
	return wuo
}

// SetNillableProgramID sets the program edge to Program by id if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableProgramID(id *int) *WorkoutUpdateOne {
	if id != nil {
		wuo = wuo.SetProgramID(*id)
	}
	return wuo
}

// SetProgram sets the program edge to Program.
func (wuo *WorkoutUpdateOne) SetProgram(p *Program) *WorkoutUpdateOne {
	return wuo.SetProgramID(p.ID)
}

// Mutation returns the WorkoutMutation object of the builder.
func (wuo *WorkoutUpdateOne) Mutation() *WorkoutMutation {
	return wuo.mutation
}

// ClearProgram clears the "program" edge to type Program.
func (wuo *WorkoutUpdateOne) ClearProgram() *WorkoutUpdateOne {
	wuo.mutation.ClearProgram()
	return wuo
}

// Save executes the query and returns the updated entity.
func (wuo *WorkoutUpdateOne) Save(ctx context.Context) (*Workout, error) {
	var (
		err  error
		node *Workout
	)
	wuo.defaults()
	if len(wuo.hooks) == 0 {
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			mut = wuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkoutUpdateOne) SaveX(ctx context.Context) *Workout {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkoutUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkoutUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WorkoutUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := workout.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

func (wuo *WorkoutUpdateOne) sqlSave(ctx context.Context) (_node *Workout, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workout.Table,
			Columns: workout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workout.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Workout.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workout.FieldUpdatedAt,
		})
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workout.FieldName,
		})
	}
	if wuo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workout.ProgramTable,
			Columns: []string{workout.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: program.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workout.ProgramTable,
			Columns: []string{workout.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: program.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Workout{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workout.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
