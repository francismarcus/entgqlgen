// Code generated by entc, DO NOT EDIT.

package usersettings

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the usersettings type in the database.
	Label = "user_settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"

	// EdgeBelongsTo holds the string denoting the belongs_to edge name in mutations.
	EdgeBelongsTo = "belongs_to"

	// Table holds the table name of the usersettings in the database.
	Table = "user_settings"
	// BelongsToTable is the table the holds the belongs_to relation/edge.
	BelongsToTable = "user_settings"
	// BelongsToInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BelongsToInverseTable = "users"
	// BelongsToColumn is the table column denoting the belongs_to relation/edge.
	BelongsToColumn = "user_settings"
)

// Columns holds all SQL columns for usersettings fields.
var Columns = []string{
	FieldID,
	FieldGender,
	FieldAge,
	FieldWeight,
	FieldHeight,
	FieldLevel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the UserSettings type.
var ForeignKeys = []string{
	"user_settings",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Gender defines the type for the gender enum field.
type Gender string

// Gender values.
const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
	GenderNone   Gender = "NONE"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderMale, GenderFemale, GenderNone:
		return nil
	default:
		return fmt.Errorf("usersettings: invalid enum value for gender field: %q", ge)
	}
}

// Level defines the type for the level enum field.
type Level string

// Level values.
const (
	LevelBeginner     Level = "BEGINNER"
	LevelIntermediate Level = "INTERMEDIATE"
	LevelAdvanced     Level = "Advanced"
)

func (l Level) String() string {
	return string(l)
}

// LevelValidator is a validator for the "level" field enum values. It is called by the builders before save.
func LevelValidator(l Level) error {
	switch l {
	case LevelBeginner, LevelIntermediate, LevelAdvanced:
		return nil
	default:
		return fmt.Errorf("usersettings: invalid enum value for level field: %q", l)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (ge Gender) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(ge.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (ge *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", v)
	}
	*ge = Gender(str)
	if err := GenderValidator(*ge); err != nil {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (l Level) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(l.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (l *Level) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", v)
	}
	*l = Level(str)
	if err := LevelValidator(*l); err != nil {
		return fmt.Errorf("%s is not a valid Level", str)
	}
	return nil
}
