// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/francismarcus/eg/ent/user"
	"github.com/francismarcus/eg/ent/usersettings"
)

// UserSettings is the model entity for the UserSettings schema.
type UserSettings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender *usersettings.Gender `json:"gender,omitempty"`
	// Age holds the value of the "age" field.
	Age *int `json:"age,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight *int `json:"weight,omitempty"`
	// Height holds the value of the "height" field.
	Height *int `json:"height,omitempty"`
	// Level holds the value of the "level" field.
	Level usersettings.Level `json:"level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSettingsQuery when eager-loading is set.
	Edges         UserSettingsEdges `json:"edges"`
	user_settings *int
}

// UserSettingsEdges holds the relations/edges for other nodes in the graph.
type UserSettingsEdges struct {
	// BelongsTo holds the value of the belongs_to edge.
	BelongsTo *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BelongsToOrErr returns the BelongsTo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSettingsEdges) BelongsToOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.BelongsTo == nil {
			// The edge belongs_to was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.BelongsTo, nil
	}
	return nil, &NotLoadedError{edge: "belongs_to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSettings) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // gender
		&sql.NullInt64{},  // age
		&sql.NullInt64{},  // weight
		&sql.NullInt64{},  // height
		&sql.NullString{}, // level
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*UserSettings) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_settings
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSettings fields.
func (us *UserSettings) assignValues(values ...interface{}) error {
	if m, n := len(values), len(usersettings.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	us.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field gender", values[0])
	} else if value.Valid {
		us.Gender = new(usersettings.Gender)
		*us.Gender = usersettings.Gender(value.String)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field age", values[1])
	} else if value.Valid {
		us.Age = new(int)
		*us.Age = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field weight", values[2])
	} else if value.Valid {
		us.Weight = new(int)
		*us.Weight = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field height", values[3])
	} else if value.Valid {
		us.Height = new(int)
		*us.Height = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field level", values[4])
	} else if value.Valid {
		us.Level = usersettings.Level(value.String)
	}
	values = values[5:]
	if len(values) == len(usersettings.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_settings", value)
		} else if value.Valid {
			us.user_settings = new(int)
			*us.user_settings = int(value.Int64)
		}
	}
	return nil
}

// QueryBelongsTo queries the belongs_to edge of the UserSettings.
func (us *UserSettings) QueryBelongsTo() *UserQuery {
	return (&UserSettingsClient{config: us.config}).QueryBelongsTo(us)
}

// Update returns a builder for updating this UserSettings.
// Note that, you need to call UserSettings.Unwrap() before calling this method, if this UserSettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSettings) Update() *UserSettingsUpdateOne {
	return (&UserSettingsClient{config: us.config}).UpdateOne(us)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (us *UserSettings) Unwrap() *UserSettings {
	tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSettings is not a transactional entity")
	}
	us.config.driver = tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSettings) String() string {
	var builder strings.Builder
	builder.WriteString("UserSettings(")
	builder.WriteString(fmt.Sprintf("id=%v", us.ID))
	if v := us.Gender; v != nil {
		builder.WriteString(", gender=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := us.Age; v != nil {
		builder.WriteString(", age=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := us.Weight; v != nil {
		builder.WriteString(", weight=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := us.Height; v != nil {
		builder.WriteString(", height=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", level=")
	builder.WriteString(fmt.Sprintf("%v", us.Level))
	builder.WriteByte(')')
	return builder.String()
}

// UserSettingsSlice is a parsable slice of UserSettings.
type UserSettingsSlice []*UserSettings

func (us UserSettingsSlice) config(cfg config) {
	for _i := range us {
		us[_i].config = cfg
	}
}
