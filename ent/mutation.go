// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/francismarcus/eg/ent/diet"
	"github.com/francismarcus/eg/ent/user"
	"github.com/francismarcus/eg/ent/usersettings"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDiet         = "Diet"
	TypeUser         = "User"
	TypeUserSettings = "UserSettings"
)

// DietMutation represents an operation that mutate the Diets
// nodes in the graph.
type DietMutation struct {
	config
	op             Op
	typ            string
	id             *int
	created_at     *time.Time
	updated_at     *time.Time
	name           *string
	goal_weight    *int
	addgoal_weight *int
	length         *int
	addlength      *int
	clearedFields  map[string]struct{}
	author         *int
	clearedauthor  bool
	done           bool
	oldValue       func(context.Context) (*Diet, error)
}

var _ ent.Mutation = (*DietMutation)(nil)

// dietOption allows to manage the mutation configuration using functional options.
type dietOption func(*DietMutation)

// newDietMutation creates new mutation for $n.Name.
func newDietMutation(c config, op Op, opts ...dietOption) *DietMutation {
	m := &DietMutation{
		config:        c,
		op:            op,
		typ:           TypeDiet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDietID sets the id field of the mutation.
func withDietID(id int) dietOption {
	return func(m *DietMutation) {
		var (
			err   error
			once  sync.Once
			value *Diet
		)
		m.oldValue = func(ctx context.Context) (*Diet, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Diet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiet sets the old Diet of the mutation.
func withDiet(node *Diet) dietOption {
	return func(m *DietMutation) {
		m.oldValue = func(context.Context) (*Diet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DietMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DietMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DietMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the created_at field.
func (m *DietMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *DietMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the Diet.
// If the Diet object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DietMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *DietMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *DietMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *DietMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the Diet.
// If the Diet object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DietMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *DietMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the name field.
func (m *DietMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DietMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Diet.
// If the Diet object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DietMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DietMutation) ResetName() {
	m.name = nil
}

// SetGoalWeight sets the goal_weight field.
func (m *DietMutation) SetGoalWeight(i int) {
	m.goal_weight = &i
	m.addgoal_weight = nil
}

// GoalWeight returns the goal_weight value in the mutation.
func (m *DietMutation) GoalWeight() (r int, exists bool) {
	v := m.goal_weight
	if v == nil {
		return
	}
	return *v, true
}

// OldGoalWeight returns the old goal_weight value of the Diet.
// If the Diet object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DietMutation) OldGoalWeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoalWeight is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoalWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoalWeight: %w", err)
	}
	return oldValue.GoalWeight, nil
}

// AddGoalWeight adds i to goal_weight.
func (m *DietMutation) AddGoalWeight(i int) {
	if m.addgoal_weight != nil {
		*m.addgoal_weight += i
	} else {
		m.addgoal_weight = &i
	}
}

// AddedGoalWeight returns the value that was added to the goal_weight field in this mutation.
func (m *DietMutation) AddedGoalWeight() (r int, exists bool) {
	v := m.addgoal_weight
	if v == nil {
		return
	}
	return *v, true
}

// ResetGoalWeight reset all changes of the "goal_weight" field.
func (m *DietMutation) ResetGoalWeight() {
	m.goal_weight = nil
	m.addgoal_weight = nil
}

// SetLength sets the length field.
func (m *DietMutation) SetLength(i int) {
	m.length = &i
	m.addlength = nil
}

// Length returns the length value in the mutation.
func (m *DietMutation) Length() (r int, exists bool) {
	v := m.length
	if v == nil {
		return
	}
	return *v, true
}

// OldLength returns the old length value of the Diet.
// If the Diet object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DietMutation) OldLength(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLength is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLength: %w", err)
	}
	return oldValue.Length, nil
}

// AddLength adds i to length.
func (m *DietMutation) AddLength(i int) {
	if m.addlength != nil {
		*m.addlength += i
	} else {
		m.addlength = &i
	}
}

// AddedLength returns the value that was added to the length field in this mutation.
func (m *DietMutation) AddedLength() (r int, exists bool) {
	v := m.addlength
	if v == nil {
		return
	}
	return *v, true
}

// ResetLength reset all changes of the "length" field.
func (m *DietMutation) ResetLength() {
	m.length = nil
	m.addlength = nil
}

// SetAuthorID sets the author edge to User by id.
func (m *DietMutation) SetAuthorID(id int) {
	m.author = &id
}

// ClearAuthor clears the author edge to User.
func (m *DietMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared returns if the edge author was cleared.
func (m *DietMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the author id in the mutation.
func (m *DietMutation) AuthorID() (id int, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the author ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *DietMutation) AuthorIDs() (ids []int) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor reset all changes of the "author" edge.
func (m *DietMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// Op returns the operation name.
func (m *DietMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Diet).
func (m *DietMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DietMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, diet.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, diet.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, diet.FieldName)
	}
	if m.goal_weight != nil {
		fields = append(fields, diet.FieldGoalWeight)
	}
	if m.length != nil {
		fields = append(fields, diet.FieldLength)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DietMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case diet.FieldCreatedAt:
		return m.CreatedAt()
	case diet.FieldUpdatedAt:
		return m.UpdatedAt()
	case diet.FieldName:
		return m.Name()
	case diet.FieldGoalWeight:
		return m.GoalWeight()
	case diet.FieldLength:
		return m.Length()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DietMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case diet.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case diet.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case diet.FieldName:
		return m.OldName(ctx)
	case diet.FieldGoalWeight:
		return m.OldGoalWeight(ctx)
	case diet.FieldLength:
		return m.OldLength(ctx)
	}
	return nil, fmt.Errorf("unknown Diet field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DietMutation) SetField(name string, value ent.Value) error {
	switch name {
	case diet.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case diet.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case diet.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case diet.FieldGoalWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoalWeight(v)
		return nil
	case diet.FieldLength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLength(v)
		return nil
	}
	return fmt.Errorf("unknown Diet field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DietMutation) AddedFields() []string {
	var fields []string
	if m.addgoal_weight != nil {
		fields = append(fields, diet.FieldGoalWeight)
	}
	if m.addlength != nil {
		fields = append(fields, diet.FieldLength)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DietMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case diet.FieldGoalWeight:
		return m.AddedGoalWeight()
	case diet.FieldLength:
		return m.AddedLength()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DietMutation) AddField(name string, value ent.Value) error {
	switch name {
	case diet.FieldGoalWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGoalWeight(v)
		return nil
	case diet.FieldLength:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLength(v)
		return nil
	}
	return fmt.Errorf("unknown Diet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DietMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DietMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DietMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Diet nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DietMutation) ResetField(name string) error {
	switch name {
	case diet.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case diet.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case diet.FieldName:
		m.ResetName()
		return nil
	case diet.FieldGoalWeight:
		m.ResetGoalWeight()
		return nil
	case diet.FieldLength:
		m.ResetLength()
		return nil
	}
	return fmt.Errorf("unknown Diet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DietMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.author != nil {
		edges = append(edges, diet.EdgeAuthor)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DietMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case diet.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DietMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DietMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DietMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedauthor {
		edges = append(edges, diet.EdgeAuthor)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DietMutation) EdgeCleared(name string) bool {
	switch name {
	case diet.EdgeAuthor:
		return m.clearedauthor
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DietMutation) ClearEdge(name string) error {
	switch name {
	case diet.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown Diet unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DietMutation) ResetEdge(name string) error {
	switch name {
	case diet.EdgeAuthor:
		m.ResetAuthor()
		return nil
	}
	return fmt.Errorf("unknown Diet edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	created_at      *time.Time
	updated_at      *time.Time
	username        *string
	email           *string
	password        *string
	clearedFields   map[string]struct{}
	settings        *int
	clearedsettings bool
	diets           map[int]struct{}
	removeddiets    map[int]struct{}
	cleareddiets    bool
	done            bool
	oldValue        func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the created_at field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUsername sets the username field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the username value in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old username value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername reset all changes of the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the password field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetSettingsID sets the settings edge to UserSettings by id.
func (m *UserMutation) SetSettingsID(id int) {
	m.settings = &id
}

// ClearSettings clears the settings edge to UserSettings.
func (m *UserMutation) ClearSettings() {
	m.clearedsettings = true
}

// SettingsCleared returns if the edge settings was cleared.
func (m *UserMutation) SettingsCleared() bool {
	return m.clearedsettings
}

// SettingsID returns the settings id in the mutation.
func (m *UserMutation) SettingsID() (id int, exists bool) {
	if m.settings != nil {
		return *m.settings, true
	}
	return
}

// SettingsIDs returns the settings ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// SettingsID instead. It exists only for internal usage by the builders.
func (m *UserMutation) SettingsIDs() (ids []int) {
	if id := m.settings; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSettings reset all changes of the "settings" edge.
func (m *UserMutation) ResetSettings() {
	m.settings = nil
	m.clearedsettings = false
}

// AddDietIDs adds the diets edge to Diet by ids.
func (m *UserMutation) AddDietIDs(ids ...int) {
	if m.diets == nil {
		m.diets = make(map[int]struct{})
	}
	for i := range ids {
		m.diets[ids[i]] = struct{}{}
	}
}

// ClearDiets clears the diets edge to Diet.
func (m *UserMutation) ClearDiets() {
	m.cleareddiets = true
}

// DietsCleared returns if the edge diets was cleared.
func (m *UserMutation) DietsCleared() bool {
	return m.cleareddiets
}

// RemoveDietIDs removes the diets edge to Diet by ids.
func (m *UserMutation) RemoveDietIDs(ids ...int) {
	if m.removeddiets == nil {
		m.removeddiets = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddiets[ids[i]] = struct{}{}
	}
}

// RemovedDiets returns the removed ids of diets.
func (m *UserMutation) RemovedDietsIDs() (ids []int) {
	for id := range m.removeddiets {
		ids = append(ids, id)
	}
	return
}

// DietsIDs returns the diets ids in the mutation.
func (m *UserMutation) DietsIDs() (ids []int) {
	for id := range m.diets {
		ids = append(ids, id)
	}
	return
}

// ResetDiets reset all changes of the "diets" edge.
func (m *UserMutation) ResetDiets() {
	m.diets = nil
	m.cleareddiets = false
	m.removeddiets = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.settings != nil {
		edges = append(edges, user.EdgeSettings)
	}
	if m.diets != nil {
		edges = append(edges, user.EdgeDiets)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSettings:
		if id := m.settings; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeDiets:
		ids := make([]ent.Value, 0, len(m.diets))
		for id := range m.diets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddiets != nil {
		edges = append(edges, user.EdgeDiets)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDiets:
		ids := make([]ent.Value, 0, len(m.removeddiets))
		for id := range m.removeddiets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsettings {
		edges = append(edges, user.EdgeSettings)
	}
	if m.cleareddiets {
		edges = append(edges, user.EdgeDiets)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSettings:
		return m.clearedsettings
	case user.EdgeDiets:
		return m.cleareddiets
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeSettings:
		m.ClearSettings()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSettings:
		m.ResetSettings()
		return nil
	case user.EdgeDiets:
		m.ResetDiets()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserSettingsMutation represents an operation that mutate the UserSettingsSlice
// nodes in the graph.
type UserSettingsMutation struct {
	config
	op                Op
	typ               string
	id                *int
	gender            *usersettings.Gender
	age               *int
	addage            *int
	weight            *int
	addweight         *int
	height            *int
	addheight         *int
	level             *usersettings.Level
	clearedFields     map[string]struct{}
	belongs_to        *int
	clearedbelongs_to bool
	done              bool
	oldValue          func(context.Context) (*UserSettings, error)
}

var _ ent.Mutation = (*UserSettingsMutation)(nil)

// usersettingsOption allows to manage the mutation configuration using functional options.
type usersettingsOption func(*UserSettingsMutation)

// newUserSettingsMutation creates new mutation for $n.Name.
func newUserSettingsMutation(c config, op Op, opts ...usersettingsOption) *UserSettingsMutation {
	m := &UserSettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeUserSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserSettingsID sets the id field of the mutation.
func withUserSettingsID(id int) usersettingsOption {
	return func(m *UserSettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *UserSettings
		)
		m.oldValue = func(ctx context.Context) (*UserSettings, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserSettings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserSettings sets the old UserSettings of the mutation.
func withUserSettings(node *UserSettings) usersettingsOption {
	return func(m *UserSettingsMutation) {
		m.oldValue = func(context.Context) (*UserSettings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserSettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserSettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserSettingsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGender sets the gender field.
func (m *UserSettingsMutation) SetGender(u usersettings.Gender) {
	m.gender = &u
}

// Gender returns the gender value in the mutation.
func (m *UserSettingsMutation) Gender() (r usersettings.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old gender value of the UserSettings.
// If the UserSettings object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserSettingsMutation) OldGender(ctx context.Context) (v *usersettings.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGender is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ClearGender clears the value of gender.
func (m *UserSettingsMutation) ClearGender() {
	m.gender = nil
	m.clearedFields[usersettings.FieldGender] = struct{}{}
}

// GenderCleared returns if the field gender was cleared in this mutation.
func (m *UserSettingsMutation) GenderCleared() bool {
	_, ok := m.clearedFields[usersettings.FieldGender]
	return ok
}

// ResetGender reset all changes of the "gender" field.
func (m *UserSettingsMutation) ResetGender() {
	m.gender = nil
	delete(m.clearedFields, usersettings.FieldGender)
}

// SetAge sets the age field.
func (m *UserSettingsMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *UserSettingsMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old age value of the UserSettings.
// If the UserSettings object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserSettingsMutation) OldAge(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to age.
func (m *UserSettingsMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *UserSettingsMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ClearAge clears the value of age.
func (m *UserSettingsMutation) ClearAge() {
	m.age = nil
	m.addage = nil
	m.clearedFields[usersettings.FieldAge] = struct{}{}
}

// AgeCleared returns if the field age was cleared in this mutation.
func (m *UserSettingsMutation) AgeCleared() bool {
	_, ok := m.clearedFields[usersettings.FieldAge]
	return ok
}

// ResetAge reset all changes of the "age" field.
func (m *UserSettingsMutation) ResetAge() {
	m.age = nil
	m.addage = nil
	delete(m.clearedFields, usersettings.FieldAge)
}

// SetWeight sets the weight field.
func (m *UserSettingsMutation) SetWeight(i int) {
	m.weight = &i
	m.addweight = nil
}

// Weight returns the weight value in the mutation.
func (m *UserSettingsMutation) Weight() (r int, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old weight value of the UserSettings.
// If the UserSettings object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserSettingsMutation) OldWeight(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWeight is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds i to weight.
func (m *UserSettingsMutation) AddWeight(i int) {
	if m.addweight != nil {
		*m.addweight += i
	} else {
		m.addweight = &i
	}
}

// AddedWeight returns the value that was added to the weight field in this mutation.
func (m *UserSettingsMutation) AddedWeight() (r int, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeight clears the value of weight.
func (m *UserSettingsMutation) ClearWeight() {
	m.weight = nil
	m.addweight = nil
	m.clearedFields[usersettings.FieldWeight] = struct{}{}
}

// WeightCleared returns if the field weight was cleared in this mutation.
func (m *UserSettingsMutation) WeightCleared() bool {
	_, ok := m.clearedFields[usersettings.FieldWeight]
	return ok
}

// ResetWeight reset all changes of the "weight" field.
func (m *UserSettingsMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
	delete(m.clearedFields, usersettings.FieldWeight)
}

// SetHeight sets the height field.
func (m *UserSettingsMutation) SetHeight(i int) {
	m.height = &i
	m.addheight = nil
}

// Height returns the height value in the mutation.
func (m *UserSettingsMutation) Height() (r int, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old height value of the UserSettings.
// If the UserSettings object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserSettingsMutation) OldHeight(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHeight is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds i to height.
func (m *UserSettingsMutation) AddHeight(i int) {
	if m.addheight != nil {
		*m.addheight += i
	} else {
		m.addheight = &i
	}
}

// AddedHeight returns the value that was added to the height field in this mutation.
func (m *UserSettingsMutation) AddedHeight() (r int, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ClearHeight clears the value of height.
func (m *UserSettingsMutation) ClearHeight() {
	m.height = nil
	m.addheight = nil
	m.clearedFields[usersettings.FieldHeight] = struct{}{}
}

// HeightCleared returns if the field height was cleared in this mutation.
func (m *UserSettingsMutation) HeightCleared() bool {
	_, ok := m.clearedFields[usersettings.FieldHeight]
	return ok
}

// ResetHeight reset all changes of the "height" field.
func (m *UserSettingsMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
	delete(m.clearedFields, usersettings.FieldHeight)
}

// SetLevel sets the level field.
func (m *UserSettingsMutation) SetLevel(u usersettings.Level) {
	m.level = &u
}

// Level returns the level value in the mutation.
func (m *UserSettingsMutation) Level() (r usersettings.Level, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old level value of the UserSettings.
// If the UserSettings object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserSettingsMutation) OldLevel(ctx context.Context) (v usersettings.Level, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLevel is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// ResetLevel reset all changes of the "level" field.
func (m *UserSettingsMutation) ResetLevel() {
	m.level = nil
}

// SetBelongsToID sets the belongs_to edge to User by id.
func (m *UserSettingsMutation) SetBelongsToID(id int) {
	m.belongs_to = &id
}

// ClearBelongsTo clears the belongs_to edge to User.
func (m *UserSettingsMutation) ClearBelongsTo() {
	m.clearedbelongs_to = true
}

// BelongsToCleared returns if the edge belongs_to was cleared.
func (m *UserSettingsMutation) BelongsToCleared() bool {
	return m.clearedbelongs_to
}

// BelongsToID returns the belongs_to id in the mutation.
func (m *UserSettingsMutation) BelongsToID() (id int, exists bool) {
	if m.belongs_to != nil {
		return *m.belongs_to, true
	}
	return
}

// BelongsToIDs returns the belongs_to ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// BelongsToID instead. It exists only for internal usage by the builders.
func (m *UserSettingsMutation) BelongsToIDs() (ids []int) {
	if id := m.belongs_to; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBelongsTo reset all changes of the "belongs_to" edge.
func (m *UserSettingsMutation) ResetBelongsTo() {
	m.belongs_to = nil
	m.clearedbelongs_to = false
}

// Op returns the operation name.
func (m *UserSettingsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserSettings).
func (m *UserSettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserSettingsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.gender != nil {
		fields = append(fields, usersettings.FieldGender)
	}
	if m.age != nil {
		fields = append(fields, usersettings.FieldAge)
	}
	if m.weight != nil {
		fields = append(fields, usersettings.FieldWeight)
	}
	if m.height != nil {
		fields = append(fields, usersettings.FieldHeight)
	}
	if m.level != nil {
		fields = append(fields, usersettings.FieldLevel)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserSettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usersettings.FieldGender:
		return m.Gender()
	case usersettings.FieldAge:
		return m.Age()
	case usersettings.FieldWeight:
		return m.Weight()
	case usersettings.FieldHeight:
		return m.Height()
	case usersettings.FieldLevel:
		return m.Level()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserSettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usersettings.FieldGender:
		return m.OldGender(ctx)
	case usersettings.FieldAge:
		return m.OldAge(ctx)
	case usersettings.FieldWeight:
		return m.OldWeight(ctx)
	case usersettings.FieldHeight:
		return m.OldHeight(ctx)
	case usersettings.FieldLevel:
		return m.OldLevel(ctx)
	}
	return nil, fmt.Errorf("unknown UserSettings field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserSettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usersettings.FieldGender:
		v, ok := value.(usersettings.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case usersettings.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case usersettings.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case usersettings.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case usersettings.FieldLevel:
		v, ok := value.(usersettings.Level)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	}
	return fmt.Errorf("unknown UserSettings field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserSettingsMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, usersettings.FieldAge)
	}
	if m.addweight != nil {
		fields = append(fields, usersettings.FieldWeight)
	}
	if m.addheight != nil {
		fields = append(fields, usersettings.FieldHeight)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserSettingsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usersettings.FieldAge:
		return m.AddedAge()
	case usersettings.FieldWeight:
		return m.AddedWeight()
	case usersettings.FieldHeight:
		return m.AddedHeight()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserSettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usersettings.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case usersettings.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case usersettings.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	}
	return fmt.Errorf("unknown UserSettings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserSettingsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usersettings.FieldGender) {
		fields = append(fields, usersettings.FieldGender)
	}
	if m.FieldCleared(usersettings.FieldAge) {
		fields = append(fields, usersettings.FieldAge)
	}
	if m.FieldCleared(usersettings.FieldWeight) {
		fields = append(fields, usersettings.FieldWeight)
	}
	if m.FieldCleared(usersettings.FieldHeight) {
		fields = append(fields, usersettings.FieldHeight)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserSettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserSettingsMutation) ClearField(name string) error {
	switch name {
	case usersettings.FieldGender:
		m.ClearGender()
		return nil
	case usersettings.FieldAge:
		m.ClearAge()
		return nil
	case usersettings.FieldWeight:
		m.ClearWeight()
		return nil
	case usersettings.FieldHeight:
		m.ClearHeight()
		return nil
	}
	return fmt.Errorf("unknown UserSettings nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserSettingsMutation) ResetField(name string) error {
	switch name {
	case usersettings.FieldGender:
		m.ResetGender()
		return nil
	case usersettings.FieldAge:
		m.ResetAge()
		return nil
	case usersettings.FieldWeight:
		m.ResetWeight()
		return nil
	case usersettings.FieldHeight:
		m.ResetHeight()
		return nil
	case usersettings.FieldLevel:
		m.ResetLevel()
		return nil
	}
	return fmt.Errorf("unknown UserSettings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserSettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.belongs_to != nil {
		edges = append(edges, usersettings.EdgeBelongsTo)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserSettingsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usersettings.EdgeBelongsTo:
		if id := m.belongs_to; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserSettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserSettingsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserSettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbelongs_to {
		edges = append(edges, usersettings.EdgeBelongsTo)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserSettingsMutation) EdgeCleared(name string) bool {
	switch name {
	case usersettings.EdgeBelongsTo:
		return m.clearedbelongs_to
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserSettingsMutation) ClearEdge(name string) error {
	switch name {
	case usersettings.EdgeBelongsTo:
		m.ClearBelongsTo()
		return nil
	}
	return fmt.Errorf("unknown UserSettings unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserSettingsMutation) ResetEdge(name string) error {
	switch name {
	case usersettings.EdgeBelongsTo:
		m.ResetBelongsTo()
		return nil
	}
	return fmt.Errorf("unknown UserSettings edge %s", name)
}
