// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"

	"github.com/francismarcus/eg/ent"
)

type AddUserSettingsInput struct {
	UserID   int                `json:"userID"`
	Settings *UserSettingsInput `json:"settings"`
}

type AuthPayload struct {
	User  *ent.User `json:"user"`
	Token *string   `json:"token"`
}

type CreateDietInput struct {
	Name   string `json:"name"`
	UserID int    `json:"userID"`
}

type LoginInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type SignupInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

type UserSettingsInput struct {
	Gender *Gender `json:"gender"`
	Age    *int    `json:"age"`
	Weight *int    `json:"weight"`
	Height *int    `json:"height"`
	Level  *Level  `json:"level"`
}

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
	GenderNone   Gender = "NONE"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderNone,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderNone:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Level string

const (
	LevelBeginner     Level = "BEGINNER"
	LevelIntermediate Level = "INTERMEDIATE"
	LevelAdvanced     Level = "ADVANCED"
)

var AllLevel = []Level{
	LevelBeginner,
	LevelIntermediate,
	LevelAdvanced,
}

func (e Level) IsValid() bool {
	switch e {
	case LevelBeginner, LevelIntermediate, LevelAdvanced:
		return true
	}
	return false
}

func (e Level) String() string {
	return string(e)
}

func (e *Level) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Level(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Level", str)
	}
	return nil
}

func (e Level) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
