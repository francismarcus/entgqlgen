scalar Cursor
scalar Time

directive @log on FIELD_DEFINITION
directive @hasID on FIELD_DEFINITION

interface Node {
  id: ID!
}

enum OrderDirection {
  ASC
  DESC
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

enum Gender {
  MALE
  FEMALE
  NONE
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

type UserSettings implements Node {
  id: ID!
  gender: Gender
  age: Int
  weight: Int
  height: Int
  level: Level
  user: User!
}

type User implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  email: String!
  username: String!
  settings: UserSettings
  diets: [Diet]
}

type UserEdge {
  node: User
  cursor: Cursor
}

type UserConnection {
  pageInfo: PageInfo
  edges: [UserEdge]
}

enum UserOrderField {
  CREATED_AT
  UPDATED_AT
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField
}

input LoginInput {
  username: String!
  password: String!
}

input SignupInput {
  username: String!
  password: String!
  email: String!
}

type AuthPayload {
  user: User
  token: String
}

type Query {
  whoami: User!
  ping: String!
  node(id: ID!): Node
  me(id: ID!): User!
  users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
  ): UserConnection
}

input UserSettingsInput {
  gender: Gender
  age: Int
  weight: Int
  height: Int
  level: Level
}

input AddUserSettingsInput {
  userID: ID!
  settings: UserSettingsInput
}

type Mutation {
  usernameAvailable(username: String!): Boolean
  login(input: LoginInput!): AuthPayload @log
  signup(input: SignupInput!): AuthPayload
  addUserSettings(input: AddUserSettingsInput!): UserSettings!
  createDiet(input: CreateDietInput!): Diet!
}

input CreateDietInput {
  name: String!
  userID: ID!
}

#Diet
type Diet implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String!
  user: User!
  goalWeight: Int!
  length: Int!
}
